package utility

import (
	"fmt"
	"github.com/pkg/errors"
	"go.etcd.io/etcd/pkg/ioutil"
	"gopkg.in/urfave/cli.v2"
	"os"
	"time"
)

const (
	_DIR               = ".build/"
	_FLAG_SPRING       = "spring"
	_FLAG_SPRING_WEB   = "spring-web"
	_POM_SPRING        = ``
	_POM_SPRING_WEB    = _POM_SPRING + ``
	_CONFIG_SPRING     = ``
	_CONFIG_SPRING_WEB = _CONFIG_SPRING + ``
)

var ArchetypeCommand = &cli.Command{
	Name:     "archetype",
	Category: "项目模版生成",
	Aliases:  []string{"template"},
	Usage:    "hl [global options] archetype/template [command options] [arguments...]",
	Action:   archetype,
	Flags: []cli.Flag{
		&cli.StringFlag{
			Name:  "name",
			Usage: "指定项目名称.",
		},
		&cli.BoolFlag{
			Name:  _FLAG_SPRING,
			Usage: "生成基于spring-framework(5.1.3)项目模版(包含core/beans/context/context-support/jdbc/transaction/aop/aspects/orm/test).",
		},
		&cli.BoolFlag{
			Name:  _FLAG_SPRING_WEB,
			Usage: "生成基于spring-framework(5.1.3)项目模版(包含core/beans/context/context-support/jdbc/transaction/aop/aspects/orm/web/webmvc/test).",
		},
	},
}

type archetype_args struct {
	name string //项目名称
	t    string //项目类型spring/spring-web
}

type archetype_action interface {
	isSpring() bool
	isSpringWeb() bool
	getRoot() string
	generatePom() error
	generateApplicationConfig() error
	generateApplicationProperties() error
	generate() error
}

func (aa *archetype_args) getRoot() string {
	return _DIR + aa.name
}

func (aa *archetype_args) isSpring() bool {
	if aa.t == _FLAG_SPRING {
		return true
	} else {
		return false
	}
}

func (aa *archetype_args) isSpringWeb() bool {
	if aa.t == _FLAG_SPRING_WEB {
		return true
	} else {
		return false
	}
}

func (aa *archetype_args) generatePom() error {
	if aa.isSpring() {
		Logger.Info(fmt.Sprintf("生成%s类型项目的pom文件.", _FLAG_SPRING))
		return generateSpringPom(aa)
	} else if aa.isSpringWeb() {
		Logger.Info(fmt.Sprintf("生成%s类型项目的pom文件.", _FLAG_SPRING_WEB))
		return generateSpringWebPom(aa)
	} else {
		Logger.Warn(fmt.Sprintf("不支持%s类型项目的创建，略过.", aa.t))
		return nil
	}
}

func generateSpringPom(aa *archetype_args) error {
	return createFile(aa.getRoot()+"/pom.xml", _POM_SPRING)
}

func generateSpringWebPom(aa *archetype_args) error {
	return createFile(aa.getRoot()+"/pom.xml", _POM_SPRING_WEB)
}

func (aa *archetype_args) generateApplicationConfig() error {
	Logger.Info(fmt.Sprintf("生成src/test的application配置."))
	for _, entry := range []map[string]string{
		{
			"fileName": aa.getRoot() + "/src/main/resources/application.xml",
			"content":  generateApplicationConfig(aa),
		},
		{
			"fileName": aa.getRoot() + "/src/test/resources/application.xml",
			"content":  generateApplicationConfig(aa),
		},
	} {
		if err := createFile(entry["fileName"], entry["content"]); err != nil {
			return err
		}
	}
	return nil
}

func generateApplicationConfig(aa *archetype_args) string {
	if aa.isSpringWeb() {
		return _CONFIG_SPRING_WEB
	} else if aa.isSpring() {
		return _CONFIG_SPRING
	}
	return ""
}

func (aa *archetype_args) generateApplicationProperties() error {
	Logger.Info(fmt.Sprintf("生成src/test的项目属性配置."))
	for _, entry := range []map[string]string{
		{
			"fileName": aa.getRoot() + "/src/main/resources/application.properties",
			"content":  "#Generated by template at " + time.Now().Format("2006/01/02 15:04:05"),
		},
		{
			"fileName": aa.getRoot() + "/src/test/resources/application.properties",
			"content":  "#Generated by template at " + time.Now().Format("2006/01/02 15:04:05"),
		},
	} {
		if err := createFile(entry["fileName"], entry["content"]); err != nil {
			return err
		}
	}
	return nil
}

func (aa *archetype_args) generate() error {
	//初始化项目目录
	if err := createDir(_DIR); err != nil {
		return err
	}
	name_ := _DIR + aa.name
	if err := createDir(name_); err != nil {
		return err
	}

	//初始化maven样式的目录结构
	Logger.Info(fmt.Sprintf("初始化项目%s的maven样式目录结构.", aa.name))
	for _, dir := range []string{
		"src/main/java",
		"src/main/resources",
		"src/test/java",
		"src/test/resources",
	} {
		if err := createDir(name_ + "/" + dir); err != nil {
			return err
		}
	}

	//生成pom文件
	if err := aa.generatePom(); err != nil {
		return err
	}

	//生成application.xml配置
	if err := aa.generateApplicationConfig(); err != nil {
		return err
	}

	//生成application.properties配置
	if err := aa.generateApplicationProperties(); err != nil {
		return err
	}

	Logger.Info(fmt.Sprintf("生成项目%s模版完成.", aa.name))
	return nil
}

func archetype(c *cli.Context) error {
	name := c.String("name")
	if name == "" {
		return errors.New("需要指定项目名称.")
	}

	aa := &archetype_args{
		name: name,
	}
	if c.Bool(_FLAG_SPRING) {
		aa.t = _FLAG_SPRING
	} else if c.Bool(_FLAG_SPRING_WEB) {
		aa.t = _FLAG_SPRING_WEB
	}

	return aa.generate()
}

func createDir(name string) error {
	f, err := os.Stat(name)
	if err == nil && f.IsDir() {
		Logger.Warn("目录" + name + "存在.")
	} else if err != nil && os.IsNotExist(err) {
		Logger.Info("创建目录" + name + ".")
		if err_ := os.MkdirAll(name, os.ModePerm); err_ != nil {
			return err_
		} else {
			return nil
		}
	} else if err != nil {
		return err
	}
	return nil
}

func createFile(name, content string) error {
	return ioutil.WriteAndSyncFile(name, []byte(content), 0666)
}
